version: '3.8'

# HIL Agent System - Docker Compose Configuration
# 
# This configuration is designed to work with the .env file for local development.
# Key features:
# - Automatically loads .env file for all services
# - Overrides localhost URLs with Docker service names for internal communication
# - Includes health checks and proper dependency management
# - Provides comprehensive logging and monitoring stack
# - Supports both development and production workflows

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: hil_agent_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main FastAPI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Override localhost URLs with Docker service names
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/hil_agent_system
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For code agent sandboxing
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.core.celery worker --loglevel=info --concurrency=4
    env_file:
      - .env
    environment:
      # Override localhost URLs with Docker service names
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/hil_agent_system
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery beat scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.core.celery beat --loglevel=info
    env_file:
      - .env
    environment:
      # Override localhost URLs with Docker service names
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/hil_agent_system
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env
    environment:
      # Override localhost URLs with Docker service names
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

# For easier development, create a docker-compose.override.yml with:
# version: '3.8'
# services:
#   app:
#     environment:
#       - DEBUG=true
#       - LOG_LEVEL=DEBUG
#     command: uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
#   worker:
#     environment:
#       - LOG_LEVEL=DEBUG