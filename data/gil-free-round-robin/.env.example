# Python 3.14 Benchmark Environment Variables
# Copy this file to .env and adjust values as needed

# Number of consumer threads (auto-detects CPU count if not set)
NUM_CONSUMERS=4

# Number of items to process in benchmark
NUM_ITEMS=10000

# Work iterations per item (higher = more CPU-intensive)
WORK_ITERATIONS=1000

# CPU limit for Docker containers
CPUS=4

# Maximum consumers for scaling test
MAX_CONSUMERS=16

# Memory limit for containers
MEMORY=2g

# Strategy to test (options: static, workstealing, central, sharded, dynamic)
STRATEGY=workstealing

# Examples for different scenarios:

# Light workload (quick test)
# NUM_CONSUMERS=2
# NUM_ITEMS=1000
# WORK_ITERATIONS=500
# CPUS=2

# Medium workload (standard benchmark)
# NUM_CONSUMERS=4
# NUM_ITEMS=10000
# WORK_ITERATIONS=1000
# CPUS=4

# Heavy workload (stress test)
# NUM_CONSUMERS=16
# NUM_ITEMS=50000
# WORK_ITERATIONS=2000
# CPUS=16
# MEMORY=4g

# High-core scaling test
# MAX_CONSUMERS=32
# NUM_ITEMS=100000
# CPUS=32
# MEMORY=8g